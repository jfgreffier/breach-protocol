{"version":3,"sources":["components/_shared/Cell.jsx","components/_shared/Grid.jsx","components/_shared/ErrorBoundary.jsx","model/game.js","providers/HighlightSymbolContext.js","components/Matrix/Matrix.jsx","components/Buffer/Buffer.jsx","components/Sequence/Sequence.jsx","components/Game/Game.jsx","model/buffer/buffer.js","utils/MatrixGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["StyledCell","styled","span","props","color","correct","backgroundColor","highlighted","observer","children","disabled","active","focused","completed","onClick","symbol","scramble","getColor","useCallback","getBackgroundColor","isDisabled","Grid","div","direction","wrap","justify","align","spacing","propTypes","PropTypes","string","number","defaultProps","ErrorBoundary","state","hasError","error","errorInfo","console","log","this","Component","states","Object","freeze","created","started","finished","selectionModes","row","column","Game","buffer","sequences","matrix","isEmpty","Error","length","selectedIndex","history","makeAutoObservable","x","y","includes","selectionMode","value","addEntry","push","isFull","position","HighlightedSymbolContext","React","createContext","HighlightedSymbolProvider","useState","highlightedSymbol","setHighlightedSymbol","Provider","StyledTable","StyledThead","getRandomId","result","characters","i","charAt","Math","floor","random","onCellClick","focusedCell","setFocusedCell","useContext","setScramble","useEffect","interval","setInterval","clearInterval","handleCellClick","onMouseEnter","resetCurrentCell","isCellActive","GameSelectionModes","isCellFocused","isCellHighlighted","onMouseLeave","colSpan","map","line","shortid","generate","StyledAside","aside","size","capacity","values","Array","_","sequence","numberOfCorrectSymbols","containsSequence","canContainSequence","slice","toString","getNumberOfCorrectSymbols","SequenceWrapper","game","select","index","Buffer","join","remainingSpace","startOfSequenceNeeded","endsWith","symbols","getRandomValueFromArray","getRandomInt","min","max","getRandomSubArray","array","subArrayLength","start","MatrixGenerator","bufferLength","matrixHeight","matrixWidth","_sequence","from","v","_matrixHeight","_matrixWidth","_sequences","_matrix","_createMatrix","_fillCriticalPath","_fillMatrix","currentIndex","isHorizontal","_getRandomEmptyCellInMatrix","j","GameWrapper","main","App","matrixGenerator","getSequences","getMatrix","GameModel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.248d168b.chunk.js","sourcesContent":["import { useCallback } from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\n\nconst StyledCell = styled.span`\n  position: relative;\n  display: inline-block;\n  width: 45px;\n  padding: 2px;\n  text-transform: uppercase;\n  text-align: center;\n  font-size: 3rem;\n  color: ${(props) => props.color};\n  ${({ correct }) => correct && 'color: blue;'}\n  background-color: ${(props) => props.backgroundColor};\n\n  &:after {\n    ${({ highlighted }) =>\n      highlighted &&\n      `\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border: 5px double var(--active-color);\n    box-shadow: 0px 0px 40px 2px #0ff;\n  `}\n  }\n`;\n\nconst Cell = ({\n  children,\n  disabled,\n  active,\n  focused,\n  completed,\n  onClick,\n  symbol,\n  scramble,\n  correct,\n  ...props\n}) => {\n  const getColor = useCallback(() => {\n    if (disabled) {\n      return 'var(--disabled-color-dark)';\n    }\n\n    return 'var(--primary-color)';\n  }, [disabled]);\n\n  const getBackgroundColor = useCallback(() => {\n    if (completed) {\n      return 'var(--success-color)';\n    } else if (active) {\n      return 'var(--active-background-color)';\n    } else if (focused) {\n      // return 'var(--primary-color-transparent)';\n    }\n\n    return 'initial';\n  }, [completed, active, focused]);\n  \n  return (\n    <StyledCell\n      color={getColor}\n      backgroundColor={getBackgroundColor}\n      isDisabled={disabled}\n      onClick={disabled || !active ? null : onClick}\n      correct={correct}\n      {...props}\n    >\n      {scramble ? scramble : (disabled ? '[ ]' : symbol)}\n    </StyledCell>\n  );\n};\n\nexport default observer(Cell);\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst Grid = styled.div`\n  display: flex;\n  flex-direction: ${(props) => props.direction};\n  flex-wrap: ${(props) => props.wrap};\n  justify-content: ${(props) => props.justify};\n  align-items: ${(props) => props.align};\n\n  & > *:not(:last-child) {\n    margin-bottom: ${(props) => `${props.spacing}rem`};\n    margin-right: ${(props) => `${props.spacing}rem`};\n  }\n`;\n\nGrid.propTypes = {\n  direction: PropTypes.string,\n  wrap: PropTypes.string,\n  justify: PropTypes.string,\n  align: PropTypes.string,\n  spacing: PropTypes.number,\n};\n\nGrid.defaultProps = {\n  direction: 'row',\n  wrap: 'nowrap',\n  justify: 'flex-start',\n  align: 'flex-start',\n  spacing: 0,\n};\n\nexport default Grid;\n","import { Component } from 'react';\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    console.log('error :', error);\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log('componentDidCatch : ', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { makeAutoObservable } from 'mobx';\n\nconst states = Object.freeze({\n  created: 'CREATED',\n  started: 'STARTED',\n  finished: 'FINISHED',\n});\n\nconst selectionModes = Object.freeze({\n  row: 'ROW',\n  column: 'COLUMN',\n});\n\nclass Game {\n  constructor(buffer, sequences, matrix) {\n    if (!buffer.isEmpty()) {\n      throw Error('Buffer must be empty');\n    }\n\n    this.buffer = buffer;\n\n    if (sequences.length === 0) {\n      throw Error('At least one sequence must be provided');\n    }\n    this.sequences = sequences;\n\n    this.matrix = matrix;\n    this.selectedIndex = 0;\n    this.history = [];\n\n    makeAutoObservable(this);\n  }\n\n  get state() {\n    if (this.buffer.isFull()) {\n      return states.finished;\n    }\n    return this.state;\n  }\n\n  get selectionMode() {\n    return this.buffer.position % 2 === 0\n      ? selectionModes.row\n      : selectionModes.column;\n  }\n\n  create() {\n    this.state = states.created;\n  }\n\n  select(x, y) {\n    if (this.history.includes(`${x}:${y}`)) {\n      throw Error('Cannot select an already visited cell');\n    }\n\n    if (this.selectionMode === selectionModes.row && x !== this.selectedIndex) {\n      throw Error(`Selected row must be ${this.selectedIndex}`);\n    }\n\n    if (\n      this.selectionMode === selectionModes.column &&\n      y !== this.selectedIndex\n    ) {\n      throw Error(`Selected column must be ${this.selectedIndex}`);\n    }\n\n    const value = this.matrix[x][y];\n\n    this.selectedIndex = this.selectionMode === selectionModes.row ? y : x;\n    this.buffer.addEntry(value);\n    this.history.push(`${x}:${y}`);\n\n    return value;\n  }\n}\n\nexport default Game;\n\nexport { states as GameStates, selectionModes as GameSelectionModes };\n","import React, { useState } from 'react';\n\nconst HighlightedSymbolContext = React.createContext();\n\nexport const HighlightedSymbolProvider = ({ children }) => {\n  const [highlightedSymbol, setHighlightedSymbol] = useState(null);\n\n  return (\n    <HighlightedSymbolContext.Provider\n      value={{ highlightedSymbol, setHighlightedSymbol }}\n    >\n      {children}\n    </HighlightedSymbolContext.Provider>\n  );\n};\n\nexport default HighlightedSymbolContext;\n","import { useCallback, useState, useContext, useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport shortid from 'shortid';\nimport styled from 'styled-components';\n\nimport { GameSelectionModes } from 'model/game';\nimport Cell from '../_shared/Cell';\nimport HighlightedSymbolContext from 'providers/HighlightSymbolContext';\n\nconst StyledTable = styled.div`\n  border: 1px solid var(--primary-color);\n`;\n\nconst StyledThead = styled.div`\n  background-color: var(--primary-color);\n`;\n\nfunction getRandomId() {\n  let result = '';\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  for (let i = 0; i < 2; i++) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return result;\n}\n\n/**\n *\n * @param {Object} props\n * @param {string[][]} props.matrix\n */\nconst Matrix = ({\n  matrix,\n  selectedIndex,\n  selectionMode,\n  onCellClick,\n  history,\n}) => {\n  const [focusedCell, setFocusedCell] = useState(null);\n  const { highlightedSymbol } = useContext(HighlightedSymbolContext);\n  const [scramble, setScramble] = useState(null);\n\n  useEffect(() => {\n    let i = 0;\n    const interval = setInterval(() => {\n      setScramble(i);\n      if (++i === 10) {\n        clearInterval(interval);\n        setScramble(null);\n      }\n    }, 40);\n  }, []);\n\n  const handleCellClick = useCallback(\n    (x, y) => () => {\n      onCellClick(x, y);\n    },\n    [onCellClick]\n  );\n\n  const onMouseEnter = useCallback(\n    (x, y) => () => {\n      setFocusedCell({ x, y });\n    },\n    []\n  );\n\n  const resetCurrentCell = useCallback(() => {\n    setFocusedCell(null);\n  }, []);\n\n  const isCellActive = useCallback(\n    (x, y) => {\n      return (\n        (selectionMode === GameSelectionModes.row && selectedIndex === x) ||\n        (selectionMode === GameSelectionModes.column && selectedIndex === y)\n      );\n    },\n    [selectedIndex, selectionMode]\n  );\n\n  const isCellFocused = useCallback(\n    (x, y) => {\n      if (focusedCell) {\n        if (\n          selectionMode === GameSelectionModes.column &&\n          x === focusedCell.x &&\n          y !== focusedCell.y\n        )\n          return true;\n        if (\n          selectionMode === GameSelectionModes.row &&\n          x !== focusedCell.x &&\n          y === focusedCell.y\n        )\n          return true;\n        if (x === focusedCell.x && y === focusedCell.y) return true;\n      }\n      return false;\n    },\n    [focusedCell, selectionMode]\n  );\n\n  const isCellHighlighted = useCallback(\n    (symbol, x, y) => {\n      return (\n        symbol === highlightedSymbol ||\n        (focusedCell &&\n          selectionMode === GameSelectionModes.row &&\n          selectedIndex === x &&\n          focusedCell.y === y) ||\n        (focusedCell &&\n          selectionMode === GameSelectionModes.column &&\n          selectedIndex === y &&\n          focusedCell.x === x)\n      );\n    },\n    [focusedCell, highlightedSymbol, selectedIndex, selectionMode]\n  );\n\n  return (\n    <StyledTable onMouseLeave={resetCurrentCell}>\n      <StyledThead colSpan={matrix.length}>CODE MATRIX</StyledThead>\n      {matrix.map((line, x) => (\n        <div key={shortid.generate()}>\n          {line.map((symbol, y) => (\n            <Cell\n              key={shortid.generate()}\n              onClick={handleCellClick(x, y)}\n              onMouseEnter={onMouseEnter(x, y)}\n              disabled={history.includes(`${x}:${y}`)}\n              active={isCellActive(x, y)}\n              focused={isCellFocused(x, y)}\n              highlighted={isCellHighlighted(symbol, x, y)}\n              symbol={symbol}\n              scramble={scramble ? getRandomId(2) : null}\n            />\n          ))}\n        </div>\n      ))}\n    </StyledTable>\n  );\n};\n\nexport default observer(Matrix);\n","import { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport { Cell } from '../_shared';\n\nconst StyledAside = styled.aside`\n  min-height: 52px;\n  min-width: ${(props) => `calc(45px * ${props.size})`};\n  border: 1px solid var(--primary-color);\n`;\n\n/**\n *\n * @param {Object} props\n * @param {number} props.capacity\n */\nconst Buffer = ({ capacity, values }) => {\n  return (\n    <StyledAside size={capacity}>\n      {[...Array(capacity)].map((_, i) => {\n        if (i >= values.length) return <Cell key={i} symbol={''} />;\n        return <Cell key={i} symbol={values[i] || null} />;\n      })}\n    </StyledAside>\n  );\n};\n\nexport default observer(Buffer);\n","import { useContext, useState } from 'react';\nimport { observer } from 'mobx-react';\nimport HighlightedSymbolContext from 'providers/HighlightSymbolContext';\nimport styled from 'styled-components';\nimport { Cell } from '../_shared';\n\nconst StyledAside = styled.aside`\n  min-height: 52px;\n  min-width: ${(props) => `calc(45px * ${props.size})`};\n  background-color: ${(props) => `${props.color}`};\n`;\n\nconst getNumberOfCorrectSymbols = (buffer, sequence) => {\n  for (let i = sequence.length - 1; i > 0; i--) {\n    if (buffer.values.length >= i) {\n      if (\n        buffer.values\n          .slice(buffer.values.length - i, buffer.values.length)\n          .toString() === sequence.slice(0, i).toString()\n      ) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\n/**\n *\n * @param {Object} props\n * @param {number} props.sequence\n */\nconst Sequence = ({ sequence, buffer }) => {\n  const [focusedCell, setFocusedCell] = useState(null);\n  const { setHighlightedSymbol } = useContext(HighlightedSymbolContext);\n\n  let numberOfCorrectSymbols = 0;\n  let color = 'black';\n  if (buffer.containsSequence(sequence)) {\n    color = 'green';\n  } else if (!buffer.canContainSequence(sequence)) {\n    color = 'red';\n  } else {\n    numberOfCorrectSymbols = getNumberOfCorrectSymbols(buffer, sequence);\n  }\n\n  return (\n    <StyledAside color={color}>\n      {sequence.map((symbol, i) => {\n        return (\n          <Cell\n            onMouseEnter={() => {\n              setHighlightedSymbol(symbol);\n              setFocusedCell(i);\n            }}\n            onMouseLeave={() => {\n              setHighlightedSymbol(null);\n              setFocusedCell(null);\n            }}\n            key={i}\n            symbol={sequence[i]}\n            correct={numberOfCorrectSymbols > i}\n            highlighted={focusedCell === i}\n          />\n        );\n      })}\n    </StyledAside>\n  );\n};\n\nexport default observer(Sequence);\n","import React from 'react';\n\nimport styled from 'styled-components';\nimport { observer } from 'mobx-react';\nimport Matrix from '../Matrix/Matrix';\nimport Buffer from '../Buffer/Buffer';\nimport Sequence from '../Sequence/Sequence';\nimport { Grid } from 'components/_shared';\nimport { HighlightedSymbolProvider } from 'providers/HighlightSymbolContext';\n\nconst SequenceWrapper = styled.div`\n  border: 1px solid var(--primary-color);\n`;\n\nconst Game = ({ game }) => {\n  const onCellClick = (x, y) => {\n    game.select(x, y);\n  };\n\n  return (\n    <HighlightedSymbolProvider>\n      <Grid direction='column' spacing={1}>\n        <Matrix\n          matrix={game.matrix}\n          selectedIndex={game.selectedIndex}\n          selectionMode={game.selectionMode}\n          history={game.history}\n          onCellClick={onCellClick}\n        />\n        <Grid direction='column' spacing={1}>\n          <Buffer {...game.buffer} />\n          <SequenceWrapper>\n            <Grid direction='column'>\n              {game.sequences.map((sequence, index) => (\n                <Sequence\n                  key={index}\n                  sequence={sequence}\n                  buffer={game.buffer}\n                />\n              ))}\n            </Grid>\n          </SequenceWrapper>\n        </Grid>\n      </Grid>\n    </HighlightedSymbolProvider>\n  );\n};\n\nexport default observer(Game);\n","import { makeAutoObservable } from 'mobx';\n\nclass Buffer {\n  constructor(capacity) {\n    this.capacity = capacity;\n    this.values = [];\n\n    makeAutoObservable(this);\n  }\n\n  get position() {\n    return this.values.length;\n  }\n\n  isEmpty() {\n    return this.values.length === 0;\n  }\n\n  isFull() {\n    return this.values.length === this.capacity;\n  }\n\n  addEntry(value) {\n    if (this.isFull()) {\n      throw Error('Buffer is full');\n    }\n\n    this.values.push(value);\n  }\n\n  containsSequence(sequence) {\n    return this.values.join('').includes(sequence.join(''));\n  }\n\n  canContainSequence(sequence) {\n    const remainingSpace = this.capacity - this.values.length;\n    if (remainingSpace < sequence.length) {\n      for (let i = 1; i <= remainingSpace; i++) {\n        const startOfSequenceNeeded = sequence\n          .slice(0, sequence.length - i)\n          .toString();\n        if (this.values.toString().endsWith(startOfSequenceNeeded)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return true;\n  }\n}\n\nexport default Buffer;\n","const symbols = ['55', '1C', 'E7', 'BD', 'F9', 'K3', 'L1'];\n\nfunction getRandomValueFromArray() {\n  return symbols[getRandomInt(0, symbols.length)];\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction getRandomSubArray(array, subArrayLength) {\n  const start = getRandomInt(0, array.length - subArrayLength + 1);\n  return array.slice(start, start + subArrayLength);\n}\n\nclass MatrixGenerator {\n\n  constructor(bufferLength, matrixHeight, matrixWidth) {\n    this._sequence = Array.from({ length: bufferLength }, (v) => getRandomValueFromArray(symbols));;\n    this._matrixHeight = matrixHeight;\n    this._matrixWidth = matrixWidth;\n\n    this._sequences = [\n      getRandomSubArray(this._sequence, 2),\n      getRandomSubArray(this._sequence, 3),\n      getRandomSubArray(this._sequence, 4),\n    ];\n\n    this._matrix = this._createMatrix();\n  }\n\n  generate() {\n    this._fillCriticalPath();\n    this._fillMatrix();\n  }\n\n  getMatrix() {\n    return this._matrix;\n  }\n\n  getSequences() {\n    return this._sequences;\n  }\n\n  _createMatrix() {\n    return Array.from({ length: this._matrixHeight }, (v) => Array.from({ length: this._matrixWidth }, (v) => null));\n  }\n\n  _fillCriticalPath() {\n    let currentIndex = [0, 0];\n    let isHorizontal = true;\n    for (let i = 0; i < this._sequence.length; i++) {\n      currentIndex = this._getRandomEmptyCellInMatrix(currentIndex, isHorizontal);\n      this._matrix[currentIndex[0]][currentIndex[1]] = this._sequence[i];\n      isHorizontal = !isHorizontal;\n    }\n  }\n\n  _getRandomEmptyCellInMatrix(currentIndex, isHorizontal) {\n    let index = currentIndex;\n    if (isHorizontal) {\n      while (this._matrix[index[0]][index[1]] != null) {\n        index = [currentIndex[0], getRandomInt(0, this._matrixWidth)];\n      }\n    } else {\n      while (this._matrix[index[0]][index[1]] != null) {\n        index = [getRandomInt(0, this._matrixHeight), currentIndex[1]];\n      }\n    }\n    return index;\n  }\n\n  _fillMatrix() {\n    for (let i = 0; i < this._matrixHeight; i++) {\n      for (let j = 0; j < this._matrixWidth; j++) {\n        if (this._matrix[i][j] == null) {\n          this._matrix[i][j] = getRandomValueFromArray(symbols);\n        }\n      }\n    }\n  }\n}\n\n\nexport default MatrixGenerator;\n","import styled from 'styled-components';\nimport { ErrorBoundary } from 'components/_shared';\nimport { default as GameModel } from './model/game';\nimport Game from './components/Game/Game';\nimport Buffer from './model/buffer/buffer';\nimport MatrixGenerator from 'utils/MatrixGenerator';\n\nconst GameWrapper = styled.main`\n  border: 1px solid var(--primary-color);\n  height: 100%;\n  padding: 4%;\n`;\n\nfunction App() {\n  const bufferCapacity = 6;\n  const buffer = new Buffer(bufferCapacity);\n  const matrixGenerator = new MatrixGenerator(bufferCapacity,5,5);\n  matrixGenerator.generate();\n  const sequences = matrixGenerator.getSequences();\n  const matrix = matrixGenerator.getMatrix();\n  const game = new GameModel(buffer, sequences, matrix);\n\n  return (\n    <ErrorBoundary>\n      <GameWrapper>\n        <Game game={game} />\n      </GameWrapper>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}